components:
  schemas:
    RegisterRequest:
      type: object
      required: [email, password, username]
      properties:
        email: { type: string, format: email, example: "user@example.com" }
        password: { type: string, format: password, minLength: 8, example: "P@ssw0rd" }
        username: { type: string, minLength: 3, example: "john_doe" }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: "user@example.com" }
        password: { type: string, format: password, example: "P@ssw0rd" }

    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }

    # Ответы
    AuthResponse:
      type: object
      properties:
        id: { type: string, format: uuid, example: "550e8400-e29b-41d4-a716-446655440000" }
        email: { type: string, example: "user@example.com" }
        username: { type: string, example: "john_doe" }
        accessToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        refreshToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        expiresIn: { type: integer, example: 3600 }

    RefreshTokenResponse:
      type: object
      properties:
        accessToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        expiresIn: { type: integer, example: 3600 }

    VerifyAccessTokenResponse:
      type: object
      properties:
        id: { type: string, format: uuid, example: "550e8400-e29b-41d4-a716-446655440000" }
        email: { type: string, example: "user@example.com" }
        username: { type: string, example: "john_doe" }